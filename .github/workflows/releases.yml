name: Prepare release

on:
  push:
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
    - '[0-9]+.[0-9]+.[0-9]+-*'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        include:
        - target: "x86_64-unknown-linux-musl"
          use-cross: false
        - target: "x86_64-unknown-freebsd"
          use-cross: true
        - target: "x86_64-pc-windows-gnu"
          use-cross: true

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Retrieve cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-ci-${{ hashFiles('**/Cargo.lock') }}
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    - name: cargo build --release
      uses: actions-rs/cargo@v1
      with:
        command: build
        use-cross: ${{ matrix.use-cross }}
        args: --release --target ${{ matrix.target }}
    - name: Store in-container artifact
      if: ${{ matrix.target != 'x86_64-pc-windows-gnu' }}
      uses: actions/upload-artifact@v2
      with:
        name: in-container-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/in-container
    - name: Store in-container artifact
      if: ${{ matrix.target == 'x86_64-pc-windows-gnu' }}
      uses: actions/upload-artifact@v2
      with:
        name: in-container-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/in-container.exe

  publish:
    runs-on: ubuntu-latest
    needs:
    - build

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Retrieve in-container artifact (x86_64-unknown-linux-musl)
      uses: actions/download-artifact@v2
      with:
        name: in-container-x86_64-unknown-linux-musl
        path: x86_64-unknown-linux-musl
    - name: Retrieve in-container artifact (x86_64-unknown-freebsd)
      uses: actions/download-artifact@v2
      with:
        name: in-container-x86_64-unknown-freebsd
        path: x86_64-unknown-freebsd
    - name: Retrieve in-container artifact (x86_64-pc-windows-gnu)
      uses: actions/download-artifact@v2
      with:
        name: in-container-x86_64-pc-windows-gnu
        path: x86_64-pc-windows-gnu
    - name: Create checksums
      run: |
        sha256sum x86_64-unknown-linux-musl/in-container > x86_64-unknown-linux-musl/in-container.sha256
        sha256sum x86_64-unknown-freebsd/in-container > x86_64-unknown-freebsd/in-container.sha256
        sha256sum x86_64-pc-windows-gnu/in-container.exe > x86_64-pc-windows-gnu/in-container.exe.sha256

    - name: Identify if tag is a prerelease
      id: tag
      run: |
        if [[ "${{ github.ref }}" =~ ^refs/tags/(.+)$ ]]; then
          echo "::set-output name=value::${BASH_REMATCH[1]}"
        else
          echo "::error ::Expected a tag"
          exit 1
        fi

        if [[ "${{ github.ref }}" =~ ^refs/tags/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::set-output name=is-prerelease::false"
        else
          echo "::set-output name=is-prerelease::true"
        fi
    - name: Extract current changelog
      id: changelog
      run:
        |
        changelog="$(hack/extract-current-changelog.py CHANGELOG.md)"
        # https://github.community/t/set-output-truncates-multiline-strings/16852/3
        changelog="${changelog//'%'/'%25'}"
        changelog="${changelog//$'\n'/'%0A'}"
        changelog="${changelog//$'\r'/'%0D'}"

        echo "::set-output name=value::$changelog"

    - name: Prepare release
      id: prepare-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: v${{ github.ref }}
        draft: true
        prerelease: ${{ steps.tag.outputs.is-prerelease }}
        body: |
          # Summary

          TODO!

          ## Changes

          ${{ steps.changelog.outputs.value }}

          ## Installation

          Choose one of these options to install in-container:

          * Download one of the pre-built binaries attached to this release matching your operating system.

          * Use [Cargo](https://doc.rust-lang.org/cargo/) to install the binary using `cargo install in-container`.

          * Use it as a dendency in your Rust application/library:

              ```toml
              [dependencies]
              in_container = "${{ steps.tag.outputs.value }}"
              ```

    - name: Upload binary for x86_64-unknown-linux-musl
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.prepare-release.outputs.upload_url }}
        asset_path: x86_64-unknown-linux-musl/in-container
        asset_name: in-container-x86_64-unknown-linux-musl
        asset_content_type: application/octet-stream
    - name: Upload binary checksum for x86_64-unknown-linux-musl
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.prepare-release.outputs.upload_url }}
        asset_path: x86_64-unknown-linux-musl/in-container.sha256
        asset_name: in-container-x86_64-unknown-linux-musl.sha256
        asset_content_type: application/octet-stream

    - name: Upload binary for x86_64-unknown-freebsd
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.prepare-release.outputs.upload_url }}
        asset_path: x86_64-unknown-freebsd/in-container
        asset_name: in-container-x86_64-unknown-freebsd
        asset_content_type: application/octet-stream
    - name: Upload binary checksum for x86_64-unknown-freebsd
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.prepare-release.outputs.upload_url }}
        asset_path: x86_64-unknown-freebsd/in-container.sha256
        asset_name: in-container-x86_64-unknown-freebsd.sha256
        asset_content_type: application/octet-stream

    - name: Upload binary for x86_64-pc-windows-gnu
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.prepare-release.outputs.upload_url }}
        asset_path: x86_64-pc-windows-gnu/in-container.exe
        asset_name: in-container-x86_64-pc-windows-gnu.exe
        asset_content_type: application/octet-stream
    - name: Upload binary checksum for x86_64-unknown-freebsd
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.prepare-release.outputs.upload_url }}
        asset_path: x86_64-pc-windows-gnu/in-container.exe.sha256
        asset_name: in-container-x86_64-pc-windows-gnu.exe.sha256
        asset_content_type: application/octet-stream
