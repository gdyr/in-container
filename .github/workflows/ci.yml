name: CI

on:
  push:
    branches:
    - master
    - staging
    - trying
  pull_request:
    branches:
    - master

jobs:
  check-license-headers:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Check license headers
      run: |
        ./hack/check-license-headers.sh

  rustfmt:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: rustfmt

    - name: cargo fmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

  clippy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy

    - name: cargo clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --workspace --lib --bins --tests --all-targets -- -Dwarnings

  yamllint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: yamllint
      uses: ibiqlik/action-yamllint@v1

  build:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.continue-on-error }}

    strategy:
      fail-fast: false
      matrix:
        rust:
        - stable
        - beta
        - # MSRV
          1.40.0
        target:
        - "x86_64-unknown-linux-gnu"
        use-cross:
        - false
        continue-on-error:
        - false

        include:
        - rust: stable
          target: "x86_64-unknown-linux-musl"
          use-cross: false
          continue-on-error: false
        - rust: nightly
          target: "x86_64-unknown-linux-gnu"
          use-cross: false
          continue-on-error: true
        - rust: stable
          target: "x86_64-pc-windows-gnu"
          use-cross: true
          continue-on-error: false
        - rust: stable
          target: "x86_64-unknown-freebsd"
          use-cross: true
          continue-on-error: false

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Retrieve cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-ci-${{ hashFiles('**/Cargo.lock') }}
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true

    - name: cargo build
      uses: actions-rs/cargo@v1
      with:
        command: build
        use-cross: ${{ matrix.use-cross }}
        args: --target ${{ matrix.target }}
    - name: cargo test
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: -- --nocapture
      env:
        TARGET: ${{ matrix.target }}
    - name: Store in-container artifact
      if: ${{ matrix.rust == 'stable' && matrix.target != 'x86_64-pc-windows-gnu' }}
      uses: actions/upload-artifact@v2
      with:
        name: in-container-${{ matrix.target }}
        path: target/${{ matrix.target }}/debug/in-container
    - name: Store in-container artifact
      if: ${{ matrix.rust == 'stable' && matrix.target == 'x86_64-pc-windows-gnu' }}
      uses: actions/upload-artifact@v2
      with:
        name: in-container-${{ matrix.target }}
        path: target/${{ matrix.target }}/debug/in-container.exe

  integration-test-linux:
    runs-on: ubuntu-latest
    needs:
    - build

    steps:
    - name: Retrieve in-container artifact (gnu)
      uses: actions/download-artifact@v2
      with:
        name: in-container-x86_64-unknown-linux-gnu
        path: x86_64-unknown-linux-gnu
    - name: Retrieve in-container artifact (musl)
      uses: actions/download-artifact@v2
      with:
        name: in-container-x86_64-unknown-linux-musl
        path: x86_64-unknown-linux-musl
    - name: Make binaries executable
      run: chmod +x */in-container
    - name: Run outside of container (gnu)
      run: |
        BINARY="x86_64-unknown-linux-gnu/in-container"
        if ! command -v "$BINARY"; then
          echo "::error ::binary $BINARY not found"
          exit 127
        fi
        if "$BINARY"; then
          echo "::error ::in-container incorrectly determined that it was running in a container, when it was not"
        fi
    - name: Run outside of container (musl)
      run: |
        BINARY="x86_64-unknown-linux-musl/in-container"
        if ! command -v "$BINARY"; then
          echo "::error ::binary $BINARY not found"
          exit 127
        fi
        if "$BINARY"; then
          echo "::error ::in-container incorrectly determined that it was running in a container, when it was not"
        fi
    - name: Run in Docker container (gnu)
      run: |
        exit_code=0
        container_runtime="$(
          docker container run \
            --rm \
            -v $PWD/x86_64-unknown-linux-gnu/in-container:/in-container:ro \
            debian \
              /in-container --print \
          || exit_code=$?
        )"

        case "$exit_code" in
          0)
            if [ "$container_runtime" != "docker" ]; then
              echo "::error ::in-container determined the wrong runtime ('$container_runtime' instead of 'docker')"
              exit 1
            fi
            ;;
          1)
            echo "::error ::in-container incorrectly determined that it was not running in a container, but it was running in Docker"
            ;;
          101)
            echo "::error ::in-container encountered an internal error"
            ;;
          125)
            echo "::error ::Docker encountered an internal error"
            ;;
          126)
            echo "::error ::Docker was unable to invoke the binary"
            ;;
          127)
            echo "::error ::Docker was unable to find the binary"
            ;;
          *)
            echo "::error ::Unknown error has occurred"
            ;;
        esac
        exit "$exit_code"
    - name: Run in Docker container (musl)
      run: |
        exit_code=0
        container_runtime="$(
          docker container run \
            --rm \
            -v $PWD/x86_64-unknown-linux-musl/in-container:/in-container:ro \
            alpine \
              /in-container --print \
          || exit_code=$?
        )"

        case "$exit_code" in
          0)
            if [ "$container_runtime" != "docker" ]; then
              echo "::error ::in-container determined the wrong runtime ('$container_runtime' instead of 'docker')"
              exit 1
            fi
            ;;
          1)
            echo "::error ::in-container incorrectly determined that it was not running in a container, but it was running in Docker"
            ;;
          101)
            echo "::error ::in-container encountered an internal error"
            ;;
          125)
            echo "::error ::Docker encountered an internal error"
            ;;
          126)
            echo "::error ::Docker was unable to invoke the binary"
            ;;
          127)
            echo "::error ::Docker was unable to find the binary"
            ;;
          *)
            echo "::error ::Unknown error has occurred"
            ;;
        esac
        exit "$exit_code"
    - name: Setup container runtimes (LXC, systemd-nspawn)
      run: |
        sudo apt-get install --no-install-recommends -y \
          lxc \
          systemd-container \
          ;

        # Create ubuntu (libc/gnu) and alpine (musl) containers through LXC.
        sudo lxc-create \
          --template download \
          --name in-container-gnu \
          -- --dist ubuntu \
             --release eoan \
             --arch amd64 \
             --no-validate \
          ;
        sudo lxc-create \
          --template download \
          --name in-container-musl \
          -- --dist alpine \
             --release 3.12 \
             --arch amd64 \
             --no-validate \
          ;

        # Ensure `/etc/machine-id` is populated (required by systemd-nspawn).
        cat /proc/sys/kernel/random/uuid | tr -d '-' | sudo tee /var/lib/lxc/in-container-gnu/rootfs/etc/machine-id >/dev/null
        cat /proc/sys/kernel/random/uuid | tr -d '-' | sudo tee /var/lib/lxc/in-container-musl/rootfs/etc/machine-id >/dev/null

        sudo cp x86_64-unknown-linux-gnu/in-container /var/lib/lxc/in-container-gnu/rootfs/in-container
        sudo cp x86_64-unknown-linux-musl/in-container /var/lib/lxc/in-container-musl/rootfs/in-container
    - name: Run in systemd-nspawn container (gnu)
      run: |
        exit_code=0
        container_runtime="$(
          sudo systemd-nspawn \
            -D /var/lib/lxc/in-container-gnu/rootfs \
              /in-container --print \
        )" || exit_code=$?

        case "$exit_code" in
          0)
            if [ "$container_runtime" != "systemd-nspawn" ]; then
              echo "::error ::in-container determined the wrong runtime ('$container_runtime' instead of 'systemd-nspawn')"
              exit 1
            fi
            ;;
          1)
            echo "::error ::in-container incorrectly determined that it was not running in a container, but it was running in Docker"
            ;;
          *)
            echo "::error ::Unknown error has occurred"
            ;;
        esac
        exit "$exit_code"
    - name: Run in systemd-nspawn container (musl)
      run: |
        exit_code=0
        container_runtime="$(
          sudo systemd-nspawn \
            -D /var/lib/lxc/in-container-musl/rootfs \
              /in-container --print \
        )" || exit_code=$?

        case "$exit_code" in
          0)
            if [ "$container_runtime" != "systemd-nspawn" ]; then
              echo "::error ::in-container determined the wrong runtime ('$container_runtime' instead of 'systemd-nspawn')"
              exit 1
            fi
            ;;
          1)
            echo "::error ::in-container incorrectly determined that it was not running in a container, but it was running in Docker"
            ;;
          *)
            echo "::error ::Unknown error has occurred"
            ;;
        esac
        exit "$exit_code"
    - name: Run in LXC container (gnu)
      run: |
        exit_code=0
        container_runtime="$(
          sudo lxc-execute \
            --name in-container-gnu \
            -- /in-container --print \
        )" || exit_code=$?

        case "$exit_code" in
          0)
            if [ "$container_runtime" != "lxc" ]; then
              echo "::error ::in-container determined the wrong runtime ('$container_runtime' instead of 'lxc')"
              exit 1
            fi
            ;;
          1)
            echo "::error ::in-container incorrectly determined that it was not running in a container, but it was running in Docker"
            ;;
          *)
            echo "::error ::Unknown error has occurred"
            ;;
        esac
        exit "$exit_code"
    - name: Run in LXC container (musl)
      run: |
        exit_code=0
        container_runtime="$(
          sudo lxc-execute \
            --name in-container-musl \
            -- /in-container --print \
        )" || exit_code=$?

        case "$exit_code" in
          0)
            if [ "$container_runtime" != "lxc" ]; then
              echo "::error ::in-container determined the wrong runtime ('$container_runtime' instead of 'lxc')"
              exit 1
            fi
            ;;
          1)
            echo "::error ::in-container incorrectly determined that it was not running in a container, but it was running in Docker"
            ;;
          *)
            echo "::error ::Unknown error has occurred"
            ;;
        esac
        exit "$exit_code"

  integration-test-freebsd:
    runs-on:
      # The FreeBSD tests run on macOS because there are no FreeBSD runners available from GitHub,
      # and macOS is the only environment where nested virtualization can be used.
      macos-latest
    needs:
    - build

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Retrieve in-container artifact
      uses: actions/download-artifact@v2
      # Note: the Vagrantfile assumes that the binary to execute is in the root of the workspace,
      # which is where this download puts it.
      with:
        name: in-container-x86_64-unknown-freebsd
    - name: vagrant up freebsd12
      working-directory: hack/vagrant
      run: vagrant up freebsd12
    - name: Run outside of jail
      working-directory: hack/vagrant
      run: |
        exit_code=0
        container_runtime="$(
          vagrant ssh freebsd12 \
            -c './in-container --print' \
        )" || exit_code=$?
        if [ "$exit_code" -ne 1 ]; then
          echo "::error ::in-container incorrectly determined that it was running in a container, when it was not"
          exit 1
        fi
    - name: Run inside jail
      working-directory: hack/vagrant
      run: |
        exit_code=0
        container_runtime="$(
          vagrant ssh freebsd12 \
            -c 'sudo jexec -l in_container /in-container --print' \
        )" || exit_code=$?

        case "$exit_code" in
          0)
            if [ "$container_runtime" != "jail" ]; then
              echo "::error ::in-container determined the wrong runtime ('$container_runtime' instead of 'jail')"
              exit 1
            fi
            ;;
          1)
            echo "::error ::in-container incorrectly determined that it was not running in a container, but it was running in Docker"
            ;;
          *)
            echo "::error ::Unknown error has occurred"
            ;;
        esac
        exit "$exit_code"
